#include <iostream>
#include "CL/cl.hpp"

using namespace std;

int main(){
    //get all platforms (drivers)
    std::vector<cl::Platform> all_platforms;
    cl::Platform::get(&all_platforms);
    if(all_platforms.size()==0){
        std::cout<<" No platforms found. Check OpenCL installation!\n";
        exit(1);
    }
	std::cout << "Number of Platforms: " << all_platforms.size() << "\n";
    cl::Platform default_platform=all_platforms[0];
    std::cout << "Using platform: "<<default_platform.getInfo<CL_PLATFORM_NAME>()<<"\n";

    //get default device of the default platform
    std::vector<cl::Device> all_devices;
    default_platform.getDevices(CL_DEVICE_TYPE_ALL, &all_devices);
    if(all_devices.size()==0){
        std::cout<<" No devices found. Check OpenCL installation!\n";
        exit(1);
    }
	std::cout << "Number of Devices: " << all_devices.size() << "\n";
    cl::Device default_device=all_devices[1];
    std::cout<< "Using device: "<<default_device.getInfo<CL_DEVICE_NAME>()<<"\n";


    cl::Context context({default_device});

    cl::Program::Sources sources;

    // kernel calculates for each element C=A+B
    std::string kernel_code=
            "   void kernel simple_add(global const int* A,    "
			"						   global const int* B,    "
			"						   global int* C,          "
            "                           global const int* D){  "
			"       int j = D[0]; "
            "       for(int i=0; i<j; i++ ){  "
			"			C[get_global_id(0)*j + i] = A[get_global_id(0)*j]-B[i];  "
            "     	}  "
            "   }                                                                               ";
    sources.push_back({kernel_code.c_str(),kernel_code.length()});

    cl::Program program(context,sources);
    if(program.build({default_device})!=CL_SUCCESS){
        std::cout<<" Error building: "<<program.getBuildInfo<CL_PROGRAM_BUILD_LOG>(default_device)<<"\n";
        exit(1);
    }

    // create buffers on the device
	int arraylen = 8;
    cl::Buffer buffer_A(context,CL_MEM_READ_WRITE,sizeof(int)*arraylen);
    cl::Buffer buffer_B(context,CL_MEM_READ_WRITE,sizeof(int)*arraylen);
    cl::Buffer buffer_C(context,CL_MEM_READ_WRITE,sizeof(int)*arraylen*arraylen);
	cl::Buffer buffer_D(context,CL_MEM_READ_WRITE,sizeof(int)*arraylen);

    int A[arraylen], B[arraylen], D[2];
	for(int i=0; i<arraylen; i++){
		A[i] = i;
		B[i] = i;
	}
	D[0] = arraylen;
    //create queue to which we will push commands for the device.
    cl::CommandQueue queue(context,default_device);
	cout<< sizeof(A)/sizeof(int) << endl;
    //write arrays A and B to the device
    queue.enqueueWriteBuffer(buffer_A,CL_TRUE,0,sizeof(int)*arraylen,A);
    queue.enqueueWriteBuffer(buffer_B,CL_TRUE,0,sizeof(int)*arraylen,B);
    queue.enqueueWriteBuffer(buffer_D,CL_TRUE,0,sizeof(int)*2,D);


    //run the kernel
    //cl::KernelFunctor simple_add(cl::Kernel(program,"simple_add"),queue,cl::NullRange,cl::NDRange(10),cl::NullRange);
    //simple_add(buffer_A,buffer_B,buffer_C);

    //alternative way to run the kernel
    cl::Kernel kernel_add=cl::Kernel(program,"simple_add");
    kernel_add.setArg(0,buffer_A);
    kernel_add.setArg(1,buffer_B);
    kernel_add.setArg(2,buffer_C);
    kernel_add.setArg(3,buffer_D);

	clock_t start_time = clock();
   	queue.enqueueNDRangeKernel(kernel_add,cl::NullRange,cl::NDRange(50),cl::NullRange);
    queue.finish();

    int C[arraylen*arraylen];
    //read result C from the device to array C
    queue.enqueueReadBuffer(buffer_C,CL_TRUE,0,sizeof(int)*arraylen*arraylen,C);
	clock_t end_time = clock();
    std::cout << (double)(end_time - start_time)/CLOCKS_PER_SEC << std::endl;
	//std::cout << C[arraylen*arraylen - 1] << std::endl;
    std::cout<<" result: \n";
    for(int i=0;i<arraylen*arraylen;i++){
        std::cout<<C[i]<<" ";
    }
	std::cout << std::endl;
    return 0;
}
